{"version":3,"sources":["UrlList.js","App.js","serviceWorker.js","index.js"],"names":["urls","牛丼","鳥の唐揚げ","App","useState","main","setMain","select","name","setName","url","setUrl","className","style","marginTop","defaultValue","onChange","e","target","value","marginLeft","onClick","size","Object","keys","length","random","Math","floor","key","id","document","getElementById","children","selectedIndex","textContent","multiple","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAAaA,G,MAAO,CAClBC,eAAI,yEACJC,iCAAO,2ECiEMC,MA/Df,WAAgB,IAAD,EACWC,mBAAS,QADpB,mBACNC,EADM,KACAC,EADA,OAEIF,mBAAS,IAAnBG,EAFM,sBAGWH,mBAAS,IAHpB,mBAGNI,EAHM,KAGAC,EAHA,OAISL,mBAAS,IAJlB,mBAINM,EAJM,KAIDC,EAJC,KAoBb,OACE,yBAAKC,UAAU,MAAMC,MAAO,CAACC,UAAW,SACtC,4BAAQC,aAAcV,EAAMW,SAAU,SAACC,GAAD,OAAOX,EAAQW,EAAEC,OAAOC,SAC5D,4BAAQA,MAAM,QAAd,UACA,4BAAQA,MAAM,QAAd,UACA,4BAAQA,MAAM,OAAd,WAEF,4BAAQN,MAAO,CAACO,WAAY,WAC1B,sDACA,0CACA,2CAEF,4BAAQP,MAAO,CAACO,WAAY,UAAWC,QApBxB,WACjB,IAAMC,EAAOC,OAAOC,KAAKxB,GAAMyB,OACzBC,EAASC,KAAKC,MAAMD,KAAKD,SAAWJ,GACpCO,EAAMN,OAAOC,KAAKxB,GAAM0B,GAC9BjB,EAAQoB,GACRlB,EAAOX,EAAK6B,MAeV,4BACA,yBAAKhB,MAAO,CAACC,UAAW,SACZ,SAATT,GACC,4BAAQyB,GAAG,SAASX,MAAOZ,EAAQe,KAAK,KAAKN,SA7BhC,SAACC,GACpB,IAAMV,EAASwB,SAASC,eAAe,UACvCvB,EAAQF,EAAO0B,SAAS1B,EAAO2B,eAAeC,aAC9CxB,EAAOX,EAAKiB,EAAEC,OAAOC,SA0BsDiB,UAAQ,GAC3E,4BAAQjB,MAAM,gBAAd,gBACA,4BAAQA,MAAM,kCAAd,mCAGM,SAATd,GACC,4BAAQiB,KAAK,KAAKc,UAAQ,GACxB,gDACA,mEAGM,QAAT/B,GACC,4BAAQiB,KAAK,KAAKc,UAAQ,GACxB,gDACA,oEAIN,yBAAKvB,MAAO,CAACC,UAAW,SACrBN,EACD,6BACE,uBAAG6B,KAAM3B,EAAKQ,OAAO,SAASoB,IAAI,uBAAuB5B,OChD/C6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASC,eAAe,SDyHpB,kBAAmBe,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc8da5a7.chunk.js","sourcesContent":["export const urls = {\n  牛丼: \"https://www.kurashiru.com/recipes/7628f8b7-9226-493d-9a7d-f0bcd4ddf156\",\n  鳥の唐揚げ: \"https://www.kurashiru.com/recipes/6ef01aef-c9e9-490b-b9d7-44fddcb09922\",\n}","import React, { useState } from 'react';\nimport './App.css';\nimport {urls} from './UrlList';\n\nfunction App() {\n  const [main, setMain] = useState(\"meat\")\n  const [select] = useState([])\n  const [name, setName] = useState(\"\")\n  const [url, setUrl] = useState(\"\")\n\n  const changeSelect = (e) => {\n    const select = document.getElementById('select')\n    setName(select.children[select.selectedIndex].textContent)\n    setUrl(urls[e.target.value])\n  }\n\n  const autoSelect = () => {\n    const size = Object.keys(urls).length\n    const random = Math.floor(Math.random() * size)\n    const key = Object.keys(urls)[random]\n    setName(key)\n    setUrl(urls[key])\n  }\n\n  return (\n    <div className=\"App\" style={{marginTop: '2rem'}}>\n      <select defaultValue={main} onChange={(e) => setMain(e.target.value)}>\n        <option value=\"meat\">肉</option>\n        <option value=\"fish\">魚</option>\n        <option value=\"egg\">卵</option>\n      </select>\n      <select style={{marginLeft: \"0.5rem\"}}>\n        <option>味噌汁</option>\n        <option>魚</option>\n        <option>卵</option>\n      </select>\n      <button style={{marginLeft: \"0.5rem\"}}　onClick={autoSelect}>自動選択</button>\n      <div style={{marginTop: \"1rem\"}}>\n        {main === 'meat' &&(\n          <select id=\"select\" value={select} size=\"10\" onChange={changeSelect} multiple>\n            <option value=\"牛丼\">牛丼</option>\n            <option value=\"鳥の唐揚げ\">鳥の唐揚げ</option>\n          </select>\n        )}\n        {main === 'fish' &&(\n          <select size=\"10\" multiple>\n            <option>牛丼</option>\n            <option>鳥の唐揚げ</option>\n          </select>\n        )}\n        {main === 'egg' &&(\n          <select size=\"10\" multiple>\n            <option>牛丼</option>\n            <option>鳥の唐揚げ</option>\n          </select>\n        )}\n      </div>\n      <div style={{marginTop: '3rem'}}>\n        {name}\n        <div>\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}